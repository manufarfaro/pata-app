datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserType {
  Mascotero
  Profesional
}

enum PetType {
  Felino
  Canino
  Ave
  Artropodo
  Reptil
  Otro
}

enum AddressType {
  Domicilio
  Oficina
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  street        String?
  streetDetails String?
  addressLat    String?
  addressLng    String?
  addressType   AddressType?
  accounts      Account[]
  sessions      Session[]
  type          UserType?
  mascotero     Mascotero?
  profesional   Profesional?
  wizardDone    Boolean      @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pet {
  id          String    @id @default(cuid())
  mascotero   Mascotero @relation(fields: [mascoteroId], references: [id], onDelete: Cascade)
  mascoteroId String
  type        PetType
  name        String
  race        String
  details     String
  birthDate   DateTime
}

model Mascotero {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  pets   Pet[]
}

model Profesional {
  id                  String    @id @default(cuid())
  userId              String    @unique
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  matricula           String
  profesionalVerified DateTime?
  isOnline            Boolean
}
